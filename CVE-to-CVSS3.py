#!/usr/bin/env python3
import sys
import argparse
import requests
from bs4 import BeautifulSoup

def singleCVE(inCVE):
    res = {}
    res[inCVE] = cveCheck(inCVE)
    return res

def fileCVE(inFile):
    file = open(inFile, 'r+')
    cves = [line for line in file.readlines()]
    file.close()
    res = {}
    for cve in cves:
        cve = cve.rstrip()
        res[cve] = cveCheck(cve)
    return res

def cveCheck(cve):
    base_url= "https://nvd.nist.gov/vuln/detail/"
    cve = cve.rstrip()
    res = requests.get(base_url + cve)
    soup = BeautifulSoup(res.text, 'html.parser')
    nvdScore = soup.find_all(id='Cvss3NistCalculatorAnchor')
    cnaScore = soup.find_all(id='Cvss3CnaCalculatorAnchor')
    if nvdScore:
        score = nvdScore[0].get_text()
    elif cnaScore:
        score = cnaScore[0].get_text()
    else:
        score = "Not Found"
    nvdVector = soup.find_all(class_='tooltipCvss3NistMetrics')
    cnaVector = soup.find_all(class_='tooltipCvss3CnaMetrics')
    if nvdVector:
        vector = nvdVector[0].get_text()
    elif cnaVector:
        vector = cnaVector[0].get_text()
    else:
        vector = "Not Found"
    arr = []
    arr.append(str(score))
    arr.append(str(vector))
    return arr

def parse_args():
    parser = argparse.ArgumentParser(description='Convert CVE into CVSSv3 Scoring if available.')
    parser.add_argument("-s", "--single", help="single CVE number e.g. CVE-2020-10021")
    parser.add_argument("-f", "--file", help="input file of list of CVEs")
    return parser.parse_args()

def main():
    args = parse_args()
    if args.single:
        res = singleCVE(args.single)
    elif args.file:
        res =fileCVE(args.file)
    else:
        print("Run with -h for help")
        sys.exit(1)	

    print(res)

if __name__ == '__main__':
    main()
